package fifth.pool;

/**
 * 数据库连接的传统模式：
 * 在主程序（如servlet、beans）中建立数据库连接
 * 进行sql操作
 * 断开数据库连接
 *
 * 这种模式开发，存在的问题：
 * -->普通的JDBC数据库连接使用DriverManager来获取，每次向数据库建立连接的时候都要将Connection加载到内存中
 * 再验证用户名和密码（得花0.05~1s的时间）。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。
 * 这样的方式将会消耗大量的资源和时间。
 * 数据库的连接资源并没有得到很好的重复利用。
 * 若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃
 * -->对于每一次数据库连接，使用完后都得断开。
 * 否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄露，最终将导致重启数据库
 * （回忆：何为java的内存泄露？C语言中内存泄露是指针被弄丢了，从而无法进行资源回收。
 * java中内存泄露是指内存中的对象不能够回收的情况）
 * -->这种开发不能控制被创建的连接的对象数，系统资源会被毫无顾忌的分配出去，如果连接过多，也可能导致内存泄露，服务器崩溃
 *
 * 数据库连接池技术
 * 为了解决传统开发中的数据库连接问题，可以采用数据库连接池技术
 *
 * 数据库连接池的基本思想：
 * 就是为数据库连接建立一个“缓冲池”。
 * 预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕后再放回去。
 *
 * 数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个
 *
 * 数据库连接池在初始化时，将创建一定数量的数据库连接放到连接池中
 * 这些数据库连接的数量是由最小数据库连接数来设定的。
 * 无论这些数据库是否被使用，连接池都将一直保证至少拥有这么多的链接数量。
 * 连接池的最大数据库连接数量限定了这个连接池能占有的最大连接数
 * 当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中
 *
 * 多种开元的数据库连接池
 * -->DBCP是Apache提供的数据库连接池，Tomcat服务器自带的dbcp数据库连接池。
 * 速度相对c3p0较快，但因自身存在bug，Hibernate3已不再提供支持
 * -->C3P0是一个开源组织提供的一个数据库连接池，速度相对较慢，稳定性还可以
 * Hibernate官方推荐使用
 * Proxool是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，稳定性较C3P0差一点
 * -->BoneCP是一个开源组织提供的数据库连接池，速度快
 * -->Druid是阿里提供的数据库连接池，据说是集DBCP、C3P0、Proxool优点于一身的数据库连接池，但是速度不确定是否有BoneCP快
 *
 * DataSource通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把DataSource称为连接池
 * DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度
 * @author SeedList
 * @date: 2022.10.03
 */
public class StudyPool {
}
